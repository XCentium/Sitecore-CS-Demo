using Sitecore.Data.Items;
using Sitecore.Diagnostics;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace CSDemo.SitecorePipelines
{
    public class CustomLinkProvider : Sitecore.Links.LinkProvider
    {
        
        public override string GetItemUrl(Sitecore.Data.Items.Item item,Sitecore.Links.UrlOptions options)
        {
            Assert.ArgumentNotNull(item, "item");
            // if item is a product or category
            if (item.Paths.Path.Contains("/sitecore/Commerce/Catalog Management/Catalogs/"))
            {
                int pathDepth = item.Paths.Path.Count(x => x == '/');
                if (pathDepth == 7) // -- Must be a category
                {
                    /*generate and return custom url*/
                    return GetItemCustomUrl(item, "Category");
                }
                if (pathDepth == 8) // -- Must be a category
                {
                    /*generate and return custom url*/
                    return GetItemCustomUrl(item, "Product");
                }
            }
                     
            /*else return the default url generated by Sitecore*/
         
            return base.GetItemUrl(item, options);
        }

        private string GetItemCustomUrl(Item item, string urlType)
        {
            string customUrl = string.Empty;
            /*Create custom Url based on custom rules*/
            /*Eg.*/
            /*If Item is based on Product Template Then*/
            /*Read the value of the Email Field and generate the custom URL based on it*/
            /*return custom Url*/

            if (urlType == "Category")
            {
                return string.Format("/Category/{0}", item.Name);
            }

            if (urlType == "Product")
            {
                return string.Format("/Category/{0}/{1}", item.Parent.Name, item["ProductId"]);
            }

            return item.Paths.Path;
        }

    }
}